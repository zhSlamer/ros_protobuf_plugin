// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: publish_info.proto

#ifndef PROTOBUF_INCLUDED_publish_5finfo_2eproto
#define PROTOBUF_INCLUDED_publish_5finfo_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_publish_5finfo_2eproto 

namespace protobuf_publish_5finfo_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_publish_5finfo_2eproto
namespace superbai {
namespace sample {
class PublishInfo;
class PublishInfoDefaultTypeInternal;
extern PublishInfoDefaultTypeInternal _PublishInfo_default_instance_;
class date;
class dateDefaultTypeInternal;
extern dateDefaultTypeInternal _date_default_instance_;
class work;
class workDefaultTypeInternal;
extern workDefaultTypeInternal _work_default_instance_;
}  // namespace sample
}  // namespace superbai
namespace google {
namespace protobuf {
template<> ::superbai::sample::PublishInfo* Arena::CreateMaybeMessage<::superbai::sample::PublishInfo>(Arena*);
template<> ::superbai::sample::date* Arena::CreateMaybeMessage<::superbai::sample::date>(Arena*);
template<> ::superbai::sample::work* Arena::CreateMaybeMessage<::superbai::sample::work>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace superbai {
namespace sample {

// ===================================================================

class PublishInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:superbai.sample.PublishInfo) */ {
 public:
  PublishInfo();
  virtual ~PublishInfo();

  PublishInfo(const PublishInfo& from);

  inline PublishInfo& operator=(const PublishInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PublishInfo(PublishInfo&& from) noexcept
    : PublishInfo() {
    *this = ::std::move(from);
  }

  inline PublishInfo& operator=(PublishInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PublishInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PublishInfo* internal_default_instance() {
    return reinterpret_cast<const PublishInfo*>(
               &_PublishInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(PublishInfo* other);
  friend void swap(PublishInfo& a, PublishInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PublishInfo* New() const final {
    return CreateMaybeMessage<PublishInfo>(NULL);
  }

  PublishInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PublishInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PublishInfo& from);
  void MergeFrom(const PublishInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PublishInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string message_type = 2;
  void clear_message_type();
  static const int kMessageTypeFieldNumber = 2;
  const ::std::string& message_type() const;
  void set_message_type(const ::std::string& value);
  #if LANG_CXX11
  void set_message_type(::std::string&& value);
  #endif
  void set_message_type(const char* value);
  void set_message_type(const char* value, size_t size);
  ::std::string* mutable_message_type();
  ::std::string* release_message_type();
  void set_allocated_message_type(::std::string* message_type);

  // string publish_msg = 3;
  void clear_publish_msg();
  static const int kPublishMsgFieldNumber = 3;
  const ::std::string& publish_msg() const;
  void set_publish_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_publish_msg(::std::string&& value);
  #endif
  void set_publish_msg(const char* value);
  void set_publish_msg(const char* value, size_t size);
  ::std::string* mutable_publish_msg();
  ::std::string* release_publish_msg();
  void set_allocated_publish_msg(::std::string* publish_msg);

  // @@protoc_insertion_point(class_scope:superbai.sample.PublishInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr message_type_;
  ::google::protobuf::internal::ArenaStringPtr publish_msg_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_publish_5finfo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class work : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:superbai.sample.work) */ {
 public:
  work();
  virtual ~work();

  work(const work& from);

  inline work& operator=(const work& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  work(work&& from) noexcept
    : work() {
    *this = ::std::move(from);
  }

  inline work& operator=(work&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const work& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const work* internal_default_instance() {
    return reinterpret_cast<const work*>(
               &_work_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(work* other);
  friend void swap(work& a, work& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline work* New() const final {
    return CreateMaybeMessage<work>(NULL);
  }

  work* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<work>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const work& from);
  void MergeFrom(const work& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(work* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:superbai.sample.work)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_publish_5finfo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class date : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:superbai.sample.date) */ {
 public:
  date();
  virtual ~date();

  date(const date& from);

  inline date& operator=(const date& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  date(date&& from) noexcept
    : date() {
    *this = ::std::move(from);
  }

  inline date& operator=(date&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const date& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const date* internal_default_instance() {
    return reinterpret_cast<const date*>(
               &_date_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(date* other);
  friend void swap(date& a, date& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline date* New() const final {
    return CreateMaybeMessage<date>(NULL);
  }

  date* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<date>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const date& from);
  void MergeFrom(const date& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(date* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:superbai.sample.date)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_publish_5finfo_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PublishInfo

// string name = 1;
inline void PublishInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PublishInfo::name() const {
  // @@protoc_insertion_point(field_get:superbai.sample.PublishInfo.name)
  return name_.GetNoArena();
}
inline void PublishInfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:superbai.sample.PublishInfo.name)
}
#if LANG_CXX11
inline void PublishInfo::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:superbai.sample.PublishInfo.name)
}
#endif
inline void PublishInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:superbai.sample.PublishInfo.name)
}
inline void PublishInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:superbai.sample.PublishInfo.name)
}
inline ::std::string* PublishInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:superbai.sample.PublishInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PublishInfo::release_name() {
  // @@protoc_insertion_point(field_release:superbai.sample.PublishInfo.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PublishInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:superbai.sample.PublishInfo.name)
}

// string message_type = 2;
inline void PublishInfo::clear_message_type() {
  message_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PublishInfo::message_type() const {
  // @@protoc_insertion_point(field_get:superbai.sample.PublishInfo.message_type)
  return message_type_.GetNoArena();
}
inline void PublishInfo::set_message_type(const ::std::string& value) {
  
  message_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:superbai.sample.PublishInfo.message_type)
}
#if LANG_CXX11
inline void PublishInfo::set_message_type(::std::string&& value) {
  
  message_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:superbai.sample.PublishInfo.message_type)
}
#endif
inline void PublishInfo::set_message_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:superbai.sample.PublishInfo.message_type)
}
inline void PublishInfo::set_message_type(const char* value, size_t size) {
  
  message_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:superbai.sample.PublishInfo.message_type)
}
inline ::std::string* PublishInfo::mutable_message_type() {
  
  // @@protoc_insertion_point(field_mutable:superbai.sample.PublishInfo.message_type)
  return message_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PublishInfo::release_message_type() {
  // @@protoc_insertion_point(field_release:superbai.sample.PublishInfo.message_type)
  
  return message_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PublishInfo::set_allocated_message_type(::std::string* message_type) {
  if (message_type != NULL) {
    
  } else {
    
  }
  message_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message_type);
  // @@protoc_insertion_point(field_set_allocated:superbai.sample.PublishInfo.message_type)
}

// string publish_msg = 3;
inline void PublishInfo::clear_publish_msg() {
  publish_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PublishInfo::publish_msg() const {
  // @@protoc_insertion_point(field_get:superbai.sample.PublishInfo.publish_msg)
  return publish_msg_.GetNoArena();
}
inline void PublishInfo::set_publish_msg(const ::std::string& value) {
  
  publish_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:superbai.sample.PublishInfo.publish_msg)
}
#if LANG_CXX11
inline void PublishInfo::set_publish_msg(::std::string&& value) {
  
  publish_msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:superbai.sample.PublishInfo.publish_msg)
}
#endif
inline void PublishInfo::set_publish_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  publish_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:superbai.sample.PublishInfo.publish_msg)
}
inline void PublishInfo::set_publish_msg(const char* value, size_t size) {
  
  publish_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:superbai.sample.PublishInfo.publish_msg)
}
inline ::std::string* PublishInfo::mutable_publish_msg() {
  
  // @@protoc_insertion_point(field_mutable:superbai.sample.PublishInfo.publish_msg)
  return publish_msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PublishInfo::release_publish_msg() {
  // @@protoc_insertion_point(field_release:superbai.sample.PublishInfo.publish_msg)
  
  return publish_msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PublishInfo::set_allocated_publish_msg(::std::string* publish_msg) {
  if (publish_msg != NULL) {
    
  } else {
    
  }
  publish_msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), publish_msg);
  // @@protoc_insertion_point(field_set_allocated:superbai.sample.PublishInfo.publish_msg)
}

// -------------------------------------------------------------------

// work

// -------------------------------------------------------------------

// date

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sample
}  // namespace superbai

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_publish_5finfo_2eproto
